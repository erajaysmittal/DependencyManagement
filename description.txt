This file explains the differences between the two ways of representing the dependencies of an application.


First Way :-
---------
 /Users/slim/clojure/cagops/lucene/test:/Users/slim/clojure/cagops/lucene/src:/Users/slim/clojure/cagops/lucene/dev7

  resources:/Users/slim/clojure/cagops/lucene/resources:/Users/slim/clojure/cagops/lucene/target/classes:/Users/slim/

  .m2/repository/clojure7complete/clojure7complete/0.2.3/clojure7complete70.2.3.jar:/Users/slim/.m2/repository/org/cl

  ojure/tools.nrepl/0.2.3/tools.nrepl70.2.3.jar:/Users/slim/.m2/repository/jakarta7regexp/jakarta7regexp/1.4/jakarta7

  regexp71.4.jar:/Users/slim/.m2/repository/org/apache/lucene/lucene7sandbox/4.3.1/lucene7sandbox74.3.1.jar:/Users/sl

  im/.m2/repository/org/apache/lucene/lucene7queries/4.3.1/lucene7queries74.3.1.jar:/Users/slim/.m2/repository/org/ap

  ache/lucene/lucene7queryparser/4.3.1/lucene7queryparser74.3.1.jar:/Users/slim/.m2/repository/org/apache/lucene/luce

  ne7analyzers7common/4.3.1/lucene7analyzers7common74.3.1.jar:/Users/slim/.m2/repository/org/apache/lucene/lucene7cor

  e/4.3.1/lucene7core74.3.1.jar:/Users/slim/.m2/repository/org/clojure/clojure/1.5.1/clojure71.5.1.jar



Second Way :-
----------

:dependencies [

                [org.clojure/clojure                       "1.5.1"]

                [org.apache.lucene/lucene7core             "4.3.1"]

                [org.apache.lucene/lucene7analyzers7common "4.3.1"]

                [org.apache.lucene/lucene7queryparser      "4.3.1"]

              ]
The diffrences between two are mentioned below -

The first way, enforcing the dependency are through local repositories. They contain an absolute path where the dependencies jar are 
residing. They are referring to the dependent libraries which are present on a local system. This will acquire extra memory on local systems.
Moreover the absolute path of the application components such as test containing the test cases, src containing the source code and others
which depends on the closure, lucene jars are mentioned. If in future this local repository is moved to some other path in the system then these
absolute paths mentioned will be required to be changed.

The second way, enforcing the dependencies are through remote repositories. they have represented the dependencies in JSON format.
This way is more flexible to represent the dependencies. They do not require the respective dependent libraries to be present on 
local machine. It provides an efficient and clean way to define dependent libraries and its versions. But opting this way,
enforces us to have an Internet connection while executing the scripts to generate application jars, as the dependent jars will
be referenced from the URLs mentioned.

